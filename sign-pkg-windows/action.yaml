name: sign-pkg-windows
description:
  Sign and package the Windows Linden viewer.

inputs:
  vault_uri:
    description: "Azure key vault URI"
    required: true
  cert_name:
    description: "Name of certificate on Azure"
    required: true
  client_id:
    description: "Azure signer app clientId"
    required: true
  client_secret:
    description: "Azure signer app clientSecret"
    required: true
  tenant_id:
    description: "Azure signer app tenantId"
    required: true
  files:
    description: "Newline-separated list of executables to sign"
    required: false
    default: |
      SecondLifeViewer.exe
      SLVersionChecker.exe
      llplugin/dullahan_host.exe

runs:
  using: composite
  steps:
    - name: Fetch Windows app
      uses: actions/download-artifact@v4
      with:
        name: Windows-app
        path: .app

    - name: Install AzureSignTool
      shell: bash
      run: dotnet tool install --global AzureSignTool

    - name: Sign the executables
      shell: bash
      run: |
        set -x
        for exe in ${{ inputs.files }}
        do
            AzureSignTool sign \
                -kvu "${{ inputs.vault_uri }}" \
                -kvi "${{ inputs.client_id }}" \
                -kvt "${{ inputs.tenant_id }}" \
                -kvs "${{ inputs.client_secret }}" \
                -kvc "${{ inputs.cert_name }}" \
                -tr  http://timestamp.digicert.com \
                -v   ".app/$exe"
        done

    - name: Build the installer
      id: nsis
      shell: python
      run: |
        # Logic derived from viewer_manifest.py - still needed though?
        # Use Python because bash refuses to expand "${programfiles(x86)}" --
        # even though that's really the name of the Windows environment
        # variable.
        import os
        import shlex
        from shutil import which
        import subprocess
        nsis_path = which(
            "makensis",
            path=os.pathsep.join(
                os.path.join(program_files, subpath)
                for program_files in
                (os.getenv(var) for var in ('programfiles', 'programfiles(x86)'))
                for subpath in ('NSIS', r'NSIS\Unicode')
                if program_files))
        assert nsis_path

        # This .nsi file was prepared by viewer_manifest.py (by substituting
        # values into a template .nsi file) and bundled into the top level of
        # the Windows-app artifact.
        command = [nsis_path, '/V2', 'secondlife_setup_tmp.nsi']
        print(shlex.join(command))
        subprocess.check_call(command, cwd='.app')

    - name: Dump NSIS input file
      if: ${{ failure() && steps.nsis.conclusion == 'failure' }}
      shell: bash
      run: cat '.app/secondlife_setup_tmp.nsi'

    - name: Sign the installer
      shell: bash
      run: |
        installer="$(ls -t .app/*_Setup.exe | head -n 1)"
        # pass installer to next step
        echo "installer=$installer" >> "$GITHUB_ENV"
        AzureSignTool sign \
            -kvu "${{ inputs.vault_uri }}" \
            -kvi "${{ inputs.client_id }}" \
            -kvt "${{ inputs.tenant_id }}" \
            -kvs "${{ inputs.client_secret }}" \
            -kvc "${{ inputs.cert_name }}" \
            -tr  http://timestamp.digicert.com \
            -v   "$installer"

    - name: Post the installer
      uses: actions/upload-artifact@v4
      with:
        name: "Windows-installer"
        path: ${{ env.installer }}
