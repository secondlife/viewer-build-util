name: sign-pkg-mac
description:
  Sign and package the macOS Linden viewer.

inputs:
  imagename:
    description: "Basename of installer .dmg"
    type: string
    required: true
  channel:
    description: "Viewer channel"
    type: string
    required: true
  cert_base64:
    description: "base64-encoded signing certificate"
    type: string
    required: true
  cert_name:
    description: "full name of signing certificate"
    type: string
    required: true
  cert_pass:
    description: "signing certificate password"
    type: string
    required: true
  note_user:
    description: "notarization Apple ID"
    type: string
    required: true
  note_pass:
    description: "password for note_user"
    type: string
    required: true
  note_team:
    description: "Team ID for note_user"
    type: string
    required: true
  apps:
    description: "Newline-separated list of embedded applications"
    required: false
    default: |
      Contents/Resources/updater/SLVersionChecker
      Contents/Resources/SLPlugin.app/Contents/MacOS/SLPlugin
      Contents/Resources/SLVoice
  files:
    description: "Newline-separated list of embedded executables/dylibs"
    required: false
    default: |
      "Contents/Resources"/*.dylib
      "Contents/Resources/llplugin"/*.dylib
      "Contents/Frameworks/Chromium Embedded Framework.framework/Libraries"/*.dylib
  channel_vendor_base:
    description: "setting for all steps"
    type: string
    required: false
    default: "Second Life"

runs:
  using: composite
  steps:
    - name: Fetch Mac app
      uses: actions/download-artifact@v4
      with:
        name: macOS-app
        path: .tarball

    - name: Unpack the tarball
      id: unpack
      shell: bash
      run: |
        set -x
        mkdir -p ".app"
        tar xJf .tarball/* -C ".app"

    - name: Set up the app sparseimage
      shell: bash
      run: |
        set -x -e
        # MBW -- If the mounted volume name changes, it breaks the .DS_Store's
        #  background image and icon positioning. If we really need
        #  differently named volumes, we'll need to create multiple DS_Store
        #  file images, or use some other trick.
        # DO NOT CHANGE without understanding comment above
        volname="${{ inputs.channel_vendor_base }} Installer"
        sparsename="${{ inputs.imagename}}.sparseimage"
        rm "$sparsename" || true
        echo "sparsename=$sparsename" >> "$GITHUB_ENV"

        # The capacity of the .sparseimage, which sometimes needs to be
        # changed, is hard-coded here instead of defined as an input because
        # changing it here allows us to rerun just this job. Changing it in
        # the viewer's build.yaml would require first rebuilding the viewer.
        hdiutil create "$sparsename" -volname "$volname" -fs HFS+ \
                -type SPARSE -megabytes 2000 -layout SPUD

        # mount the image and get the name of the mount point and device node
        hdi_output="$(hdiutil attach -private "$sparsename")"

        # with set -e in effect, test has the force of an assert
        [[ "$hdi_output" =~ (/dev/disk[0-9]+)[^s] ]]
        devfile="${BASH_REMATCH[1]}"
        echo "devfile=$devfile" >> "$GITHUB_ENV"
        [[ "$hdi_output" =~ HFS[[:space:]]+(.+) ]]
        volpath="${BASH_REMATCH[1]}"

        # copy everything to the mounted sparseimage

        # What follows is oddly based on a predefined .DS_Store file, which
        # apparently used to be one of several -- despite the presence of
        # dmg-cleanup.applescript since at least 2009. Leaving legacy behavior
        # for now, albeit with files transplanted from the viewer repo.
        dmg_prefill="${{ github.action_path }}/installer/release-dmg"
        for f in _VolumeIcon.icns _DS_Store background.jpg
        do
            dest="$volpath/${f/_/.}"
            cp -v "$dmg_prefill/$f" "$dest"
            # hide the files used only to control the Finder display
            SetFile -a V "$dest"
        done

        # don't forget the application itself
        artifact_app="$(ls -dt .app/*.app | head -n 1)"
        cp -a "$artifact_app" "$volpath/"
        app_name="$(basename "$artifact_app")"
        echo "app_path=$volpath/$app_name" >> "$GITHUB_ENV"

        # Create the alias file (which is a resource file) from the .r
        Rez "$dmg_prefill/Applications-alias.r" -o "$volpath/Applications"

        # Set the alias file's alias bit
        SetFile -a A "$volpath/Applications"

        # Set the disk image root's custom icon bit
        SetFile -a C "$volpath"

    - name: Sign and notarize the app
      shell: bash
      env:
        cert_base64: "${{ inputs.cert_base64 }}"
        cert_name: "${{ inputs.cert_name }}"
        cert_pass: "${{ inputs.cert_pass }}"
        note_user: "${{ inputs.note_user }}"
        note_pass: "${{ inputs.note_pass }}"
        note_team: "${{ inputs.note_team }}"
        apps:      "${{ inputs.apps }}"
        files:     "${{ inputs.files }}"
      run: |
        # Sign the app; do this in the copy that's in the .dmg so that the
        # extended attributes used by the signature are preserved; moving the
        # files would leave them behind and invalidate the signatures.
        "${{ github.action_path }}/sign.sh" "${{ env.app_path }}"

    - name: Unmount the sparseimage
      # unmount even if the above fails
      if: ${{ ! cancelled() }}
      shell: bash
      run: |
        # Empirically, on GitHub we've hit errors like:
        # hdiutil: couldn't eject "disk10" - Resource busy
        retries=3
        retry_wait=2
        for (( attempt=0; attempt < $retries; attempt+=1 ))
        do
            if [[ $attempt -gt 0 ]]
            then
                echo "detach $attempt failed, waiting $retry_wait seconds before retrying" >&2
                sleep $retry_wait
                (( retry_wait*=2 ))
            fi
            hdiutil detach -force ${{ env.devfile }} && break
        done
        if [[ $? -ne 0 ]]
        then echo "::warning::$retries attempts to detach ${{ env.devfile }} failed"
        fi

    - name: Package the sparseimage as .dmg
      shell: bash
      run: |
        set -x
        mkdir -p .installer
        installer=".installer/${{ inputs.imagename }}.dmg"
        rm "$installer" || true
        # pass installer to next step
        echo "installer=$installer" >> "$GITHUB_ENV"

        hdiutil convert "${{ env.sparsename }}" -format UDZO -imagekey zlib-level=9 \
                -o "$installer"
        rm "${{ env.sparsename }}"

    - name: Post the installer
      uses: actions/upload-artifact@v4
      with:
        name: "macOS-installer"
        path: ${{ env.installer }}
